//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from MipsToBinary/MipsAsm.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
// [System.CLSCompliant(false)]
public partial class MipsAsmParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, WS=48, NEWLINE=49, COMMENT=50, NUM=51, HEX_NUM=52, 
		ALPHA=53, IMM_REG=54, S_REG=55, T_REG=56, V_REG=57, A_REG=58, K_REG=59;
	public const int
		RULE_prog = 0, RULE_iden = 1, RULE_label = 2, RULE_reg = 3, RULE_usigned_imm = 4, 
		RULE_signed_imm = 5, RULE_stat = 6, RULE_op_add = 7, RULE_op_addu = 8, 
		RULE_op_sub = 9, RULE_op_and = 10, RULE_op_or = 11, RULE_op_nor = 12, 
		RULE_op_xor = 13, RULE_op_nand = 14, RULE_op_slt = 15, RULE_op_sltu = 16, 
		RULE_op_sll = 17, RULE_op_srl = 18, RULE_op_sra = 19, RULE_op_jr = 20, 
		RULE_instr_r = 21, RULE_op_addi = 22, RULE_op_addiu = 23, RULE_op_lw = 24, 
		RULE_op_lh = 25, RULE_op_lhu = 26, RULE_op_lb = 27, RULE_op_lbu = 28, 
		RULE_op_sw = 29, RULE_op_sh = 30, RULE_op_sb = 31, RULE_op_lui = 32, RULE_op_andi = 33, 
		RULE_op_ori = 34, RULE_op_nori = 35, RULE_op_slti = 36, RULE_op_beq = 37, 
		RULE_op_bne = 38, RULE_op_bgtz = 39, RULE_instr_i = 40, RULE_op_j = 41, 
		RULE_op_jal = 42, RULE_instr_j = 43, RULE_op_halt = 44, RULE_instr = 45, 
		RULE_instr_pseudo = 46, RULE_op_bgt = 47, RULE_op_move = 48;
	public static readonly string[] ruleNames = {
		"prog", "iden", "label", "reg", "usigned_imm", "signed_imm", "stat", "op_add", 
		"op_addu", "op_sub", "op_and", "op_or", "op_nor", "op_xor", "op_nand", 
		"op_slt", "op_sltu", "op_sll", "op_srl", "op_sra", "op_jr", "instr_r", 
		"op_addi", "op_addiu", "op_lw", "op_lh", "op_lhu", "op_lb", "op_lbu", 
		"op_sw", "op_sh", "op_sb", "op_lui", "op_andi", "op_ori", "op_nori", "op_slti", 
		"op_beq", "op_bne", "op_bgtz", "instr_i", "op_j", "op_jal", "instr_j", 
		"op_halt", "instr", "instr_pseudo", "op_bgt", "op_move"
	};

	private static readonly string[] _LiteralNames = {
		null, "'_'", "':'", "'$zero'", "'$sp'", "'$fp'", "'$ra'", "'-'", "'add'", 
		"','", "'addu'", "'sub'", "'and'", "'or'", "'nor'", "'xor'", "'nand'", 
		"'slt'", "'sltu'", "'sll'", "'srl'", "'sra'", "'jr'", "'addi'", "'addiu'", 
		"'lw'", "'('", "')'", "'lh'", "'lhu'", "'lb'", "'lbu'", "'sw'", "'sh'", 
		"'sb'", "'lui'", "'andi'", "'ori'", "'nori'", "'slti'", "'beq'", "'bne'", 
		"'bgtz'", "'j'", "'jal'", "'halt'", "'bgt'", "'move'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"WS", "NEWLINE", "COMMENT", "NUM", "HEX_NUM", "ALPHA", "IMM_REG", "S_REG", 
		"T_REG", "V_REG", "A_REG", "K_REG"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "MipsAsm.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MipsAsmParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MipsAsmParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MipsAsmParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 98; stat();
				}
				}
				State = 101;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__7) | (1L << T__9) | (1L << T__10) | (1L << T__11) | (1L << T__12) | (1L << T__13) | (1L << T__14) | (1L << T__15) | (1L << T__16) | (1L << T__18) | (1L << T__19) | (1L << T__20) | (1L << T__21) | (1L << T__22) | (1L << T__23) | (1L << T__24) | (1L << T__27) | (1L << T__28) | (1L << T__29) | (1L << T__30) | (1L << T__31) | (1L << T__32) | (1L << T__33) | (1L << T__34) | (1L << T__35) | (1L << T__36) | (1L << T__37) | (1L << T__38) | (1L << T__39) | (1L << T__40) | (1L << T__41) | (1L << T__42) | (1L << T__43) | (1L << T__44) | (1L << T__45) | (1L << T__46) | (1L << NEWLINE) | (1L << COMMENT) | (1L << NUM) | (1L << ALPHA))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdenContext : ParserRuleContext {
		public ITerminalNode ALPHA() { return GetToken(MipsAsmParser.ALPHA, 0); }
		public ITerminalNode NUM() { return GetToken(MipsAsmParser.NUM, 0); }
		public IdenContext iden() {
			return GetRuleContext<IdenContext>(0);
		}
		public IdenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_iden; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterIden(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitIden(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIden(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdenContext iden() {
		IdenContext _localctx = new IdenContext(Context, State);
		EnterRule(_localctx, 2, RULE_iden);
		try {
			State = 111;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 103; Match(ALPHA);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 104; Match(NUM);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 105; Match(ALPHA);
				State = 106; iden();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 107; Match(NUM);
				State = 108; iden();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 109; Match(T__0);
				State = 110; iden();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LabelContext : ParserRuleContext {
		public IdenContext iden() {
			return GetRuleContext<IdenContext>(0);
		}
		public LabelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_label; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterLabel(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitLabel(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLabel(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LabelContext label() {
		LabelContext _localctx = new LabelContext(Context, State);
		EnterRule(_localctx, 4, RULE_label);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113; iden();
			State = 114; Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegContext : ParserRuleContext {
		public ITerminalNode S_REG() { return GetToken(MipsAsmParser.S_REG, 0); }
		public ITerminalNode T_REG() { return GetToken(MipsAsmParser.T_REG, 0); }
		public ITerminalNode A_REG() { return GetToken(MipsAsmParser.A_REG, 0); }
		public ITerminalNode V_REG() { return GetToken(MipsAsmParser.V_REG, 0); }
		public ITerminalNode K_REG() { return GetToken(MipsAsmParser.K_REG, 0); }
		public ITerminalNode IMM_REG() { return GetToken(MipsAsmParser.IMM_REG, 0); }
		public RegContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_reg; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterReg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitReg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegContext reg() {
		RegContext _localctx = new RegContext(Context, State);
		EnterRule(_localctx, 6, RULE_reg);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << IMM_REG) | (1L << S_REG) | (1L << T_REG) | (1L << V_REG) | (1L << A_REG) | (1L << K_REG))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Usigned_immContext : ParserRuleContext {
		public ITerminalNode NUM() { return GetToken(MipsAsmParser.NUM, 0); }
		public ITerminalNode HEX_NUM() { return GetToken(MipsAsmParser.HEX_NUM, 0); }
		public Usigned_immContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_usigned_imm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterUsigned_imm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitUsigned_imm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsigned_imm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Usigned_immContext usigned_imm() {
		Usigned_immContext _localctx = new Usigned_immContext(Context, State);
		EnterRule(_localctx, 8, RULE_usigned_imm);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			_la = TokenStream.LA(1);
			if ( !(_la==NUM || _la==HEX_NUM) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Signed_immContext : ParserRuleContext {
		public Usigned_immContext usigned_imm() {
			return GetRuleContext<Usigned_immContext>(0);
		}
		public Signed_immContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signed_imm; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterSigned_imm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitSigned_imm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSigned_imm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Signed_immContext signed_imm() {
		Signed_immContext _localctx = new Signed_immContext(Context, State);
		EnterRule(_localctx, 10, RULE_signed_imm);
		try {
			State = 123;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; Match(T__6);
				State = 121; usigned_imm();
				}
				break;
			case NUM:
			case HEX_NUM:
				EnterOuterAlt(_localctx, 2);
				{
				State = 122; usigned_imm();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		public InstrContext instr() {
			return GetRuleContext<InstrContext>(0);
		}
		public ITerminalNode NEWLINE() { return GetToken(MipsAsmParser.NEWLINE, 0); }
		public LabelContext label() {
			return GetRuleContext<LabelContext>(0);
		}
		public ITerminalNode COMMENT() { return GetToken(MipsAsmParser.COMMENT, 0); }
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStat(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 12, RULE_stat);
		try {
			State = 138;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 125; instr(0);
				State = 126; Match(NEWLINE);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 128; instr(0);
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 129; label();
				State = 130; instr(0);
				State = 131; Match(NEWLINE);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 133; label();
				State = 134; instr(0);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 136; Match(NEWLINE);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 137; Match(COMMENT);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_addContext : ParserRuleContext {
		public RegContext rd;
		public RegContext rs;
		public RegContext rt;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_addContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_add; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_add(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_add(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_add(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_addContext op_add() {
		Op_addContext _localctx = new Op_addContext(Context, State);
		EnterRule(_localctx, 14, RULE_op_add);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; Match(T__7);
			State = 141; _localctx.rd = reg();
			State = 142; Match(T__8);
			State = 143; _localctx.rs = reg();
			State = 144; Match(T__8);
			State = 145; _localctx.rt = reg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_adduContext : ParserRuleContext {
		public RegContext rd;
		public RegContext rs;
		public RegContext rt;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_adduContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_addu; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_addu(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_addu(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_addu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_adduContext op_addu() {
		Op_adduContext _localctx = new Op_adduContext(Context, State);
		EnterRule(_localctx, 16, RULE_op_addu);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 147; Match(T__9);
			State = 148; _localctx.rd = reg();
			State = 149; Match(T__8);
			State = 150; _localctx.rs = reg();
			State = 151; Match(T__8);
			State = 152; _localctx.rt = reg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_subContext : ParserRuleContext {
		public RegContext rd;
		public RegContext rs;
		public RegContext rt;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_subContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_sub; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_sub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_sub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_sub(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_subContext op_sub() {
		Op_subContext _localctx = new Op_subContext(Context, State);
		EnterRule(_localctx, 18, RULE_op_sub);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 154; Match(T__10);
			State = 155; _localctx.rd = reg();
			State = 156; Match(T__8);
			State = 157; _localctx.rs = reg();
			State = 158; Match(T__8);
			State = 159; _localctx.rt = reg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_andContext : ParserRuleContext {
		public RegContext rd;
		public RegContext rs;
		public RegContext rt;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_andContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_and; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_and(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_and(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_and(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_andContext op_and() {
		Op_andContext _localctx = new Op_andContext(Context, State);
		EnterRule(_localctx, 20, RULE_op_and);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 161; Match(T__11);
			State = 162; _localctx.rd = reg();
			State = 163; Match(T__8);
			State = 164; _localctx.rs = reg();
			State = 165; Match(T__8);
			State = 166; _localctx.rt = reg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_orContext : ParserRuleContext {
		public RegContext rd;
		public RegContext rs;
		public RegContext rt;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_orContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_or; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_or(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_or(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_or(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_orContext op_or() {
		Op_orContext _localctx = new Op_orContext(Context, State);
		EnterRule(_localctx, 22, RULE_op_or);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168; Match(T__12);
			State = 169; _localctx.rd = reg();
			State = 170; Match(T__8);
			State = 171; _localctx.rs = reg();
			State = 172; Match(T__8);
			State = 173; _localctx.rt = reg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_norContext : ParserRuleContext {
		public RegContext rd;
		public RegContext rs;
		public RegContext rt;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_norContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_nor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_nor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_nor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_nor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_norContext op_nor() {
		Op_norContext _localctx = new Op_norContext(Context, State);
		EnterRule(_localctx, 24, RULE_op_nor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175; Match(T__13);
			State = 176; _localctx.rd = reg();
			State = 177; Match(T__8);
			State = 178; _localctx.rs = reg();
			State = 179; Match(T__8);
			State = 180; _localctx.rt = reg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_xorContext : ParserRuleContext {
		public RegContext rd;
		public RegContext rs;
		public RegContext rt;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_xorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_xor; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_xor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_xor(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_xor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_xorContext op_xor() {
		Op_xorContext _localctx = new Op_xorContext(Context, State);
		EnterRule(_localctx, 26, RULE_op_xor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 182; Match(T__14);
			State = 183; _localctx.rd = reg();
			State = 184; Match(T__8);
			State = 185; _localctx.rs = reg();
			State = 186; Match(T__8);
			State = 187; _localctx.rt = reg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_nandContext : ParserRuleContext {
		public RegContext rd;
		public RegContext rs;
		public RegContext rt;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_nandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_nand; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_nand(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_nand(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_nand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_nandContext op_nand() {
		Op_nandContext _localctx = new Op_nandContext(Context, State);
		EnterRule(_localctx, 28, RULE_op_nand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189; Match(T__15);
			State = 190; _localctx.rd = reg();
			State = 191; Match(T__8);
			State = 192; _localctx.rs = reg();
			State = 193; Match(T__8);
			State = 194; _localctx.rt = reg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_sltContext : ParserRuleContext {
		public RegContext rd;
		public RegContext rs;
		public RegContext rt;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_sltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_slt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_slt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_slt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_slt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_sltContext op_slt() {
		Op_sltContext _localctx = new Op_sltContext(Context, State);
		EnterRule(_localctx, 30, RULE_op_slt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 196; Match(T__16);
			State = 197; _localctx.rd = reg();
			State = 198; Match(T__8);
			State = 199; _localctx.rs = reg();
			State = 200; Match(T__8);
			State = 201; _localctx.rt = reg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_sltuContext : ParserRuleContext {
		public RegContext rd;
		public RegContext rs;
		public RegContext rt;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_sltuContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_sltu; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_sltu(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_sltu(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_sltu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_sltuContext op_sltu() {
		Op_sltuContext _localctx = new Op_sltuContext(Context, State);
		EnterRule(_localctx, 32, RULE_op_sltu);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203; Match(T__17);
			State = 204; _localctx.rd = reg();
			State = 205; Match(T__8);
			State = 206; _localctx.rs = reg();
			State = 207; Match(T__8);
			State = 208; _localctx.rt = reg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_sllContext : ParserRuleContext {
		public RegContext rd;
		public RegContext rt;
		public Usigned_immContext usigned_imm() {
			return GetRuleContext<Usigned_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_sllContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_sll; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_sll(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_sll(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_sll(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_sllContext op_sll() {
		Op_sllContext _localctx = new Op_sllContext(Context, State);
		EnterRule(_localctx, 34, RULE_op_sll);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 210; Match(T__18);
			State = 211; _localctx.rd = reg();
			State = 212; Match(T__8);
			State = 213; _localctx.rt = reg();
			State = 214; Match(T__8);
			State = 215; usigned_imm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_srlContext : ParserRuleContext {
		public RegContext rd;
		public RegContext rt;
		public Usigned_immContext usigned_imm() {
			return GetRuleContext<Usigned_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_srlContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_srl; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_srl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_srl(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_srl(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_srlContext op_srl() {
		Op_srlContext _localctx = new Op_srlContext(Context, State);
		EnterRule(_localctx, 36, RULE_op_srl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 217; Match(T__19);
			State = 218; _localctx.rd = reg();
			State = 219; Match(T__8);
			State = 220; _localctx.rt = reg();
			State = 221; Match(T__8);
			State = 222; usigned_imm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_sraContext : ParserRuleContext {
		public RegContext rd;
		public RegContext rt;
		public Usigned_immContext usigned_imm() {
			return GetRuleContext<Usigned_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_sraContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_sra; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_sra(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_sra(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_sra(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_sraContext op_sra() {
		Op_sraContext _localctx = new Op_sraContext(Context, State);
		EnterRule(_localctx, 38, RULE_op_sra);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224; Match(T__20);
			State = 225; _localctx.rd = reg();
			State = 226; Match(T__8);
			State = 227; _localctx.rt = reg();
			State = 228; Match(T__8);
			State = 229; usigned_imm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_jrContext : ParserRuleContext {
		public RegContext rs;
		public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		public Op_jrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_jr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_jr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_jr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_jr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_jrContext op_jr() {
		Op_jrContext _localctx = new Op_jrContext(Context, State);
		EnterRule(_localctx, 40, RULE_op_jr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231; Match(T__21);
			State = 232; _localctx.rs = reg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instr_rContext : ParserRuleContext {
		public Op_addContext op_add() {
			return GetRuleContext<Op_addContext>(0);
		}
		public Op_adduContext op_addu() {
			return GetRuleContext<Op_adduContext>(0);
		}
		public Op_subContext op_sub() {
			return GetRuleContext<Op_subContext>(0);
		}
		public Op_andContext op_and() {
			return GetRuleContext<Op_andContext>(0);
		}
		public Op_orContext op_or() {
			return GetRuleContext<Op_orContext>(0);
		}
		public Op_norContext op_nor() {
			return GetRuleContext<Op_norContext>(0);
		}
		public Op_xorContext op_xor() {
			return GetRuleContext<Op_xorContext>(0);
		}
		public Op_nandContext op_nand() {
			return GetRuleContext<Op_nandContext>(0);
		}
		public Op_sltContext op_slt() {
			return GetRuleContext<Op_sltContext>(0);
		}
		public Op_sllContext op_sll() {
			return GetRuleContext<Op_sllContext>(0);
		}
		public Op_srlContext op_srl() {
			return GetRuleContext<Op_srlContext>(0);
		}
		public Op_sraContext op_sra() {
			return GetRuleContext<Op_sraContext>(0);
		}
		public Op_jrContext op_jr() {
			return GetRuleContext<Op_jrContext>(0);
		}
		public Instr_rContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instr_r; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterInstr_r(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitInstr_r(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstr_r(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instr_rContext instr_r() {
		Instr_rContext _localctx = new Instr_rContext(Context, State);
		EnterRule(_localctx, 42, RULE_instr_r);
		try {
			State = 247;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 234; op_add();
				}
				break;
			case T__9:
				EnterOuterAlt(_localctx, 2);
				{
				State = 235; op_addu();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 3);
				{
				State = 236; op_sub();
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 4);
				{
				State = 237; op_and();
				}
				break;
			case T__12:
				EnterOuterAlt(_localctx, 5);
				{
				State = 238; op_or();
				}
				break;
			case T__13:
				EnterOuterAlt(_localctx, 6);
				{
				State = 239; op_nor();
				}
				break;
			case T__14:
				EnterOuterAlt(_localctx, 7);
				{
				State = 240; op_xor();
				}
				break;
			case T__15:
				EnterOuterAlt(_localctx, 8);
				{
				State = 241; op_nand();
				}
				break;
			case T__16:
				EnterOuterAlt(_localctx, 9);
				{
				State = 242; op_slt();
				}
				break;
			case T__18:
				EnterOuterAlt(_localctx, 10);
				{
				State = 243; op_sll();
				}
				break;
			case T__19:
				EnterOuterAlt(_localctx, 11);
				{
				State = 244; op_srl();
				}
				break;
			case T__20:
				EnterOuterAlt(_localctx, 12);
				{
				State = 245; op_sra();
				}
				break;
			case T__21:
				EnterOuterAlt(_localctx, 13);
				{
				State = 246; op_jr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_addiContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Signed_immContext signed_imm() {
			return GetRuleContext<Signed_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_addiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_addi; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_addi(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_addi(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_addi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_addiContext op_addi() {
		Op_addiContext _localctx = new Op_addiContext(Context, State);
		EnterRule(_localctx, 44, RULE_op_addi);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249; Match(T__22);
			State = 250; _localctx.rt = reg();
			State = 251; Match(T__8);
			State = 252; _localctx.rs = reg();
			State = 253; Match(T__8);
			State = 254; signed_imm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_addiuContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Usigned_immContext usigned_imm() {
			return GetRuleContext<Usigned_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_addiuContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_addiu; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_addiu(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_addiu(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_addiu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_addiuContext op_addiu() {
		Op_addiuContext _localctx = new Op_addiuContext(Context, State);
		EnterRule(_localctx, 46, RULE_op_addiu);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 256; Match(T__23);
			State = 257; _localctx.rt = reg();
			State = 258; Match(T__8);
			State = 259; _localctx.rs = reg();
			State = 260; Match(T__8);
			State = 261; usigned_imm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_lwContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Signed_immContext signed_imm() {
			return GetRuleContext<Signed_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_lwContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_lw; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_lw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_lw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_lw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_lwContext op_lw() {
		Op_lwContext _localctx = new Op_lwContext(Context, State);
		EnterRule(_localctx, 48, RULE_op_lw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; Match(T__24);
			State = 264; _localctx.rt = reg();
			State = 265; Match(T__8);
			State = 266; signed_imm();
			State = 267; Match(T__25);
			State = 268; _localctx.rs = reg();
			State = 269; Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_lhContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Signed_immContext signed_imm() {
			return GetRuleContext<Signed_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_lhContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_lh; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_lh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_lh(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_lh(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_lhContext op_lh() {
		Op_lhContext _localctx = new Op_lhContext(Context, State);
		EnterRule(_localctx, 50, RULE_op_lh);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 271; Match(T__27);
			State = 272; _localctx.rt = reg();
			State = 273; Match(T__8);
			State = 274; signed_imm();
			State = 275; Match(T__25);
			State = 276; _localctx.rs = reg();
			State = 277; Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_lhuContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Signed_immContext signed_imm() {
			return GetRuleContext<Signed_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_lhuContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_lhu; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_lhu(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_lhu(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_lhu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_lhuContext op_lhu() {
		Op_lhuContext _localctx = new Op_lhuContext(Context, State);
		EnterRule(_localctx, 52, RULE_op_lhu);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279; Match(T__28);
			State = 280; _localctx.rt = reg();
			State = 281; Match(T__8);
			State = 282; signed_imm();
			State = 283; Match(T__25);
			State = 284; _localctx.rs = reg();
			State = 285; Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_lbContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Signed_immContext signed_imm() {
			return GetRuleContext<Signed_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_lbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_lb; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_lb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_lb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_lb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_lbContext op_lb() {
		Op_lbContext _localctx = new Op_lbContext(Context, State);
		EnterRule(_localctx, 54, RULE_op_lb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287; Match(T__29);
			State = 288; _localctx.rt = reg();
			State = 289; Match(T__8);
			State = 290; signed_imm();
			State = 291; Match(T__25);
			State = 292; _localctx.rs = reg();
			State = 293; Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_lbuContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Signed_immContext signed_imm() {
			return GetRuleContext<Signed_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_lbuContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_lbu; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_lbu(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_lbu(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_lbu(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_lbuContext op_lbu() {
		Op_lbuContext _localctx = new Op_lbuContext(Context, State);
		EnterRule(_localctx, 56, RULE_op_lbu);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 295; Match(T__30);
			State = 296; _localctx.rt = reg();
			State = 297; Match(T__8);
			State = 298; signed_imm();
			State = 299; Match(T__25);
			State = 300; _localctx.rs = reg();
			State = 301; Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_swContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Signed_immContext signed_imm() {
			return GetRuleContext<Signed_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_swContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_sw; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_sw(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_sw(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_sw(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_swContext op_sw() {
		Op_swContext _localctx = new Op_swContext(Context, State);
		EnterRule(_localctx, 58, RULE_op_sw);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 303; Match(T__31);
			State = 304; _localctx.rt = reg();
			State = 305; Match(T__8);
			State = 306; signed_imm();
			State = 307; Match(T__25);
			State = 308; _localctx.rs = reg();
			State = 309; Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_shContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Signed_immContext signed_imm() {
			return GetRuleContext<Signed_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_shContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_sh; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_sh(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_sh(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_sh(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_shContext op_sh() {
		Op_shContext _localctx = new Op_shContext(Context, State);
		EnterRule(_localctx, 60, RULE_op_sh);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 311; Match(T__32);
			State = 312; _localctx.rt = reg();
			State = 313; Match(T__8);
			State = 314; signed_imm();
			State = 315; Match(T__25);
			State = 316; _localctx.rs = reg();
			State = 317; Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_sbContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Signed_immContext signed_imm() {
			return GetRuleContext<Signed_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_sbContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_sb; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_sb(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_sb(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_sb(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_sbContext op_sb() {
		Op_sbContext _localctx = new Op_sbContext(Context, State);
		EnterRule(_localctx, 62, RULE_op_sb);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 319; Match(T__33);
			State = 320; _localctx.rt = reg();
			State = 321; Match(T__8);
			State = 322; signed_imm();
			State = 323; Match(T__25);
			State = 324; _localctx.rs = reg();
			State = 325; Match(T__26);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_luiContext : ParserRuleContext {
		public RegContext rt;
		public Usigned_immContext usigned_imm() {
			return GetRuleContext<Usigned_immContext>(0);
		}
		public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		public Op_luiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_lui; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_lui(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_lui(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_lui(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_luiContext op_lui() {
		Op_luiContext _localctx = new Op_luiContext(Context, State);
		EnterRule(_localctx, 64, RULE_op_lui);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 327; Match(T__34);
			State = 328; _localctx.rt = reg();
			State = 329; Match(T__8);
			State = 330; usigned_imm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_andiContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Usigned_immContext usigned_imm() {
			return GetRuleContext<Usigned_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_andiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_andi; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_andi(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_andi(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_andi(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_andiContext op_andi() {
		Op_andiContext _localctx = new Op_andiContext(Context, State);
		EnterRule(_localctx, 66, RULE_op_andi);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 332; Match(T__35);
			State = 333; _localctx.rt = reg();
			State = 334; Match(T__8);
			State = 335; _localctx.rs = reg();
			State = 336; Match(T__8);
			State = 337; usigned_imm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_oriContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Usigned_immContext usigned_imm() {
			return GetRuleContext<Usigned_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_oriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_ori; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_ori(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_ori(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_ori(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_oriContext op_ori() {
		Op_oriContext _localctx = new Op_oriContext(Context, State);
		EnterRule(_localctx, 68, RULE_op_ori);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 339; Match(T__36);
			State = 340; _localctx.rt = reg();
			State = 341; Match(T__8);
			State = 342; _localctx.rs = reg();
			State = 343; Match(T__8);
			State = 344; usigned_imm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_noriContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Usigned_immContext usigned_imm() {
			return GetRuleContext<Usigned_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_noriContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_nori; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_nori(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_nori(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_nori(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_noriContext op_nori() {
		Op_noriContext _localctx = new Op_noriContext(Context, State);
		EnterRule(_localctx, 70, RULE_op_nori);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 346; Match(T__37);
			State = 347; _localctx.rt = reg();
			State = 348; Match(T__8);
			State = 349; _localctx.rs = reg();
			State = 350; Match(T__8);
			State = 351; usigned_imm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_sltiContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public Signed_immContext signed_imm() {
			return GetRuleContext<Signed_immContext>(0);
		}
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_sltiContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_slti; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_slti(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_slti(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_slti(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_sltiContext op_slti() {
		Op_sltiContext _localctx = new Op_sltiContext(Context, State);
		EnterRule(_localctx, 72, RULE_op_slti);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 353; Match(T__38);
			State = 354; _localctx.rt = reg();
			State = 355; Match(T__8);
			State = 356; _localctx.rs = reg();
			State = 357; Match(T__8);
			State = 358; signed_imm();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_beqContext : ParserRuleContext {
		public RegContext rs;
		public RegContext rt;
		public IdenContext target;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public IdenContext iden() {
			return GetRuleContext<IdenContext>(0);
		}
		public Op_beqContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_beq; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_beq(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_beq(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_beq(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_beqContext op_beq() {
		Op_beqContext _localctx = new Op_beqContext(Context, State);
		EnterRule(_localctx, 74, RULE_op_beq);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 360; Match(T__39);
			State = 361; _localctx.rs = reg();
			State = 362; Match(T__8);
			State = 363; _localctx.rt = reg();
			State = 364; Match(T__8);
			State = 365; _localctx.target = iden();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_bneContext : ParserRuleContext {
		public RegContext rs;
		public RegContext rt;
		public IdenContext target;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public IdenContext iden() {
			return GetRuleContext<IdenContext>(0);
		}
		public Op_bneContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_bne; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_bne(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_bne(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_bne(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_bneContext op_bne() {
		Op_bneContext _localctx = new Op_bneContext(Context, State);
		EnterRule(_localctx, 76, RULE_op_bne);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 367; Match(T__40);
			State = 368; _localctx.rs = reg();
			State = 369; Match(T__8);
			State = 370; _localctx.rt = reg();
			State = 371; Match(T__8);
			State = 372; _localctx.target = iden();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_bgtzContext : ParserRuleContext {
		public RegContext rs;
		public IdenContext target;
		public RegContext reg() {
			return GetRuleContext<RegContext>(0);
		}
		public IdenContext iden() {
			return GetRuleContext<IdenContext>(0);
		}
		public Op_bgtzContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_bgtz; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_bgtz(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_bgtz(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_bgtz(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_bgtzContext op_bgtz() {
		Op_bgtzContext _localctx = new Op_bgtzContext(Context, State);
		EnterRule(_localctx, 78, RULE_op_bgtz);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374; Match(T__41);
			State = 375; _localctx.rs = reg();
			State = 376; Match(T__8);
			State = 377; _localctx.target = iden();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instr_iContext : ParserRuleContext {
		public Op_addiContext op_addi() {
			return GetRuleContext<Op_addiContext>(0);
		}
		public Op_addiuContext op_addiu() {
			return GetRuleContext<Op_addiuContext>(0);
		}
		public Op_lwContext op_lw() {
			return GetRuleContext<Op_lwContext>(0);
		}
		public Op_lhContext op_lh() {
			return GetRuleContext<Op_lhContext>(0);
		}
		public Op_lhuContext op_lhu() {
			return GetRuleContext<Op_lhuContext>(0);
		}
		public Op_lbContext op_lb() {
			return GetRuleContext<Op_lbContext>(0);
		}
		public Op_lbuContext op_lbu() {
			return GetRuleContext<Op_lbuContext>(0);
		}
		public Op_swContext op_sw() {
			return GetRuleContext<Op_swContext>(0);
		}
		public Op_shContext op_sh() {
			return GetRuleContext<Op_shContext>(0);
		}
		public Op_sbContext op_sb() {
			return GetRuleContext<Op_sbContext>(0);
		}
		public Op_luiContext op_lui() {
			return GetRuleContext<Op_luiContext>(0);
		}
		public Op_andiContext op_andi() {
			return GetRuleContext<Op_andiContext>(0);
		}
		public Op_oriContext op_ori() {
			return GetRuleContext<Op_oriContext>(0);
		}
		public Op_noriContext op_nori() {
			return GetRuleContext<Op_noriContext>(0);
		}
		public Op_sltiContext op_slti() {
			return GetRuleContext<Op_sltiContext>(0);
		}
		public Op_beqContext op_beq() {
			return GetRuleContext<Op_beqContext>(0);
		}
		public Op_bneContext op_bne() {
			return GetRuleContext<Op_bneContext>(0);
		}
		public Op_bgtzContext op_bgtz() {
			return GetRuleContext<Op_bgtzContext>(0);
		}
		public Instr_iContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instr_i; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterInstr_i(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitInstr_i(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstr_i(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instr_iContext instr_i() {
		Instr_iContext _localctx = new Instr_iContext(Context, State);
		EnterRule(_localctx, 80, RULE_instr_i);
		try {
			State = 397;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__22:
				EnterOuterAlt(_localctx, 1);
				{
				State = 379; op_addi();
				}
				break;
			case T__23:
				EnterOuterAlt(_localctx, 2);
				{
				State = 380; op_addiu();
				}
				break;
			case T__24:
				EnterOuterAlt(_localctx, 3);
				{
				State = 381; op_lw();
				}
				break;
			case T__27:
				EnterOuterAlt(_localctx, 4);
				{
				State = 382; op_lh();
				}
				break;
			case T__28:
				EnterOuterAlt(_localctx, 5);
				{
				State = 383; op_lhu();
				}
				break;
			case T__29:
				EnterOuterAlt(_localctx, 6);
				{
				State = 384; op_lb();
				}
				break;
			case T__30:
				EnterOuterAlt(_localctx, 7);
				{
				State = 385; op_lbu();
				}
				break;
			case T__31:
				EnterOuterAlt(_localctx, 8);
				{
				State = 386; op_sw();
				}
				break;
			case T__32:
				EnterOuterAlt(_localctx, 9);
				{
				State = 387; op_sh();
				}
				break;
			case T__33:
				EnterOuterAlt(_localctx, 10);
				{
				State = 388; op_sb();
				}
				break;
			case T__34:
				EnterOuterAlt(_localctx, 11);
				{
				State = 389; op_lui();
				}
				break;
			case T__35:
				EnterOuterAlt(_localctx, 12);
				{
				State = 390; op_andi();
				}
				break;
			case T__36:
				EnterOuterAlt(_localctx, 13);
				{
				State = 391; op_ori();
				}
				break;
			case T__37:
				EnterOuterAlt(_localctx, 14);
				{
				State = 392; op_nori();
				}
				break;
			case T__38:
				EnterOuterAlt(_localctx, 15);
				{
				State = 393; op_slti();
				}
				break;
			case T__39:
				EnterOuterAlt(_localctx, 16);
				{
				State = 394; op_beq();
				}
				break;
			case T__40:
				EnterOuterAlt(_localctx, 17);
				{
				State = 395; op_bne();
				}
				break;
			case T__41:
				EnterOuterAlt(_localctx, 18);
				{
				State = 396; op_bgtz();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_jContext : ParserRuleContext {
		public IdenContext target;
		public IdenContext iden() {
			return GetRuleContext<IdenContext>(0);
		}
		public Op_jContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_j; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_j(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_j(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_j(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_jContext op_j() {
		Op_jContext _localctx = new Op_jContext(Context, State);
		EnterRule(_localctx, 82, RULE_op_j);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 399; Match(T__42);
			State = 400; _localctx.target = iden();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_jalContext : ParserRuleContext {
		public IdenContext target;
		public IdenContext iden() {
			return GetRuleContext<IdenContext>(0);
		}
		public Op_jalContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_jal; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_jal(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_jal(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_jal(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_jalContext op_jal() {
		Op_jalContext _localctx = new Op_jalContext(Context, State);
		EnterRule(_localctx, 84, RULE_op_jal);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 402; Match(T__43);
			State = 403; _localctx.target = iden();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Instr_jContext : ParserRuleContext {
		public Op_jContext op_j() {
			return GetRuleContext<Op_jContext>(0);
		}
		public Op_jalContext op_jal() {
			return GetRuleContext<Op_jalContext>(0);
		}
		public Instr_jContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instr_j; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterInstr_j(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitInstr_j(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstr_j(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instr_jContext instr_j() {
		Instr_jContext _localctx = new Instr_jContext(Context, State);
		EnterRule(_localctx, 86, RULE_instr_j);
		try {
			State = 407;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__42:
				EnterOuterAlt(_localctx, 1);
				{
				State = 405; op_j();
				}
				break;
			case T__43:
				EnterOuterAlt(_localctx, 2);
				{
				State = 406; op_jal();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_haltContext : ParserRuleContext {
		public Op_haltContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_halt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_halt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_halt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_halt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_haltContext op_halt() {
		Op_haltContext _localctx = new Op_haltContext(Context, State);
		EnterRule(_localctx, 88, RULE_op_halt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 409; Match(T__44);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstrContext : ParserRuleContext {
		public Instr_rContext instr_r() {
			return GetRuleContext<Instr_rContext>(0);
		}
		public Instr_iContext instr_i() {
			return GetRuleContext<Instr_iContext>(0);
		}
		public Instr_jContext instr_j() {
			return GetRuleContext<Instr_jContext>(0);
		}
		public Instr_pseudoContext instr_pseudo() {
			return GetRuleContext<Instr_pseudoContext>(0);
		}
		public Op_haltContext op_halt() {
			return GetRuleContext<Op_haltContext>(0);
		}
		public InstrContext instr() {
			return GetRuleContext<InstrContext>(0);
		}
		public ITerminalNode COMMENT() { return GetToken(MipsAsmParser.COMMENT, 0); }
		public InstrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instr; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterInstr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitInstr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstrContext instr() {
		return instr(0);
	}

	private InstrContext instr(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		InstrContext _localctx = new InstrContext(Context, _parentState);
		InstrContext _prevctx = _localctx;
		int _startState = 90;
		EnterRecursionRule(_localctx, 90, RULE_instr, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 417;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
			case T__9:
			case T__10:
			case T__11:
			case T__12:
			case T__13:
			case T__14:
			case T__15:
			case T__16:
			case T__18:
			case T__19:
			case T__20:
			case T__21:
				{
				State = 412; instr_r();
				}
				break;
			case T__22:
			case T__23:
			case T__24:
			case T__27:
			case T__28:
			case T__29:
			case T__30:
			case T__31:
			case T__32:
			case T__33:
			case T__34:
			case T__35:
			case T__36:
			case T__37:
			case T__38:
			case T__39:
			case T__40:
			case T__41:
				{
				State = 413; instr_i();
				}
				break;
			case T__42:
			case T__43:
				{
				State = 414; instr_j();
				}
				break;
			case T__45:
			case T__46:
				{
				State = 415; instr_pseudo();
				}
				break;
			case T__44:
				{
				State = 416; op_halt();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 423;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new InstrContext(_parentctx, _parentState);
					PushNewRecursionContext(_localctx, _startState, RULE_instr);
					State = 419;
					if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
					State = 420; Match(COMMENT);
					}
					} 
				}
				State = 425;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,8,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Instr_pseudoContext : ParserRuleContext {
		public Op_bgtContext op_bgt() {
			return GetRuleContext<Op_bgtContext>(0);
		}
		public Op_moveContext op_move() {
			return GetRuleContext<Op_moveContext>(0);
		}
		public Instr_pseudoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_instr_pseudo; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterInstr_pseudo(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitInstr_pseudo(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstr_pseudo(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Instr_pseudoContext instr_pseudo() {
		Instr_pseudoContext _localctx = new Instr_pseudoContext(Context, State);
		EnterRule(_localctx, 92, RULE_instr_pseudo);
		try {
			State = 428;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__45:
				EnterOuterAlt(_localctx, 1);
				{
				State = 426; op_bgt();
				}
				break;
			case T__46:
				EnterOuterAlt(_localctx, 2);
				{
				State = 427; op_move();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_bgtContext : ParserRuleContext {
		public RegContext rs;
		public RegContext rt;
		public IdenContext target;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public IdenContext iden() {
			return GetRuleContext<IdenContext>(0);
		}
		public Op_bgtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_bgt; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_bgt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_bgt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_bgt(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_bgtContext op_bgt() {
		Op_bgtContext _localctx = new Op_bgtContext(Context, State);
		EnterRule(_localctx, 94, RULE_op_bgt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 430; Match(T__45);
			State = 431; _localctx.rs = reg();
			State = 432; Match(T__8);
			State = 433; _localctx.rt = reg();
			State = 434; Match(T__8);
			State = 435; _localctx.target = iden();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Op_moveContext : ParserRuleContext {
		public RegContext rt;
		public RegContext rs;
		public RegContext[] reg() {
			return GetRuleContexts<RegContext>();
		}
		public RegContext reg(int i) {
			return GetRuleContext<RegContext>(i);
		}
		public Op_moveContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_op_move; } }
		public override void EnterRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.EnterOp_move(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IMipsAsmListener typedListener = listener as IMipsAsmListener;
			if (typedListener != null) typedListener.ExitOp_move(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IMipsAsmVisitor<TResult> typedVisitor = visitor as IMipsAsmVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOp_move(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Op_moveContext op_move() {
		Op_moveContext _localctx = new Op_moveContext(Context, State);
		EnterRule(_localctx, 96, RULE_op_move);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 437; Match(T__46);
			State = 438; _localctx.rt = reg();
			State = 439; Match(T__8);
			State = 440; _localctx.rs = reg();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 45: return instr_sempred((InstrContext)_localctx, predIndex);
		}
		return true;
	}
	private bool instr_sempred(InstrContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '=', '\x1BD', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x4', '\x1C', '\t', '\x1C', '\x4', '\x1D', '\t', 
		'\x1D', '\x4', '\x1E', '\t', '\x1E', '\x4', '\x1F', '\t', '\x1F', '\x4', 
		' ', '\t', ' ', '\x4', '!', '\t', '!', '\x4', '\"', '\t', '\"', '\x4', 
		'#', '\t', '#', '\x4', '$', '\t', '$', '\x4', '%', '\t', '%', '\x4', '&', 
		'\t', '&', '\x4', '\'', '\t', '\'', '\x4', '(', '\t', '(', '\x4', ')', 
		'\t', ')', '\x4', '*', '\t', '*', '\x4', '+', '\t', '+', '\x4', ',', '\t', 
		',', '\x4', '-', '\t', '-', '\x4', '.', '\t', '.', '\x4', '/', '\t', '/', 
		'\x4', '\x30', '\t', '\x30', '\x4', '\x31', '\t', '\x31', '\x4', '\x32', 
		'\t', '\x32', '\x3', '\x2', '\x6', '\x2', '\x66', '\n', '\x2', '\r', '\x2', 
		'\xE', '\x2', 'g', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x5', '\x3', 
		'r', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '~', '\n', '\a', '\x3', '\b', '\x3', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 
		'\x8D', '\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', 
		'\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x10', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', 
		'\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x12', 
		'\x3', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\x3', '\x14', '\x3', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', 
		'\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\x3', '\x16', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', '\x3', '\x17', 
		'\x5', '\x17', '\xFA', '\n', '\x17', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1A', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', 
		'\x1B', '\x3', '\x1B', '\x3', '\x1B', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', '\x1C', '\x3', 
		'\x1C', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', 
		'\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1D', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', '\x1E', '\x3', 
		'\x1E', '\x3', '\x1E', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		'\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', '\x1F', '\x3', 
		' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', ' ', '\x3', 
		' ', '\x3', ' ', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', 
		'!', '\x3', '!', '\x3', '!', '\x3', '!', '\x3', '\"', '\x3', '\"', '\x3', 
		'\"', '\x3', '\"', '\x3', '\"', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', 
		'#', '\x3', '#', '\x3', '#', '\x3', '#', '\x3', '$', '\x3', '$', '\x3', 
		'$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '$', '\x3', '%', '\x3', 
		'%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', '%', '\x3', 
		'&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', '&', '\x3', 
		'&', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', '\x3', '\'', 
		'\x3', '\'', '\x3', '\'', '\x3', '(', '\x3', '(', '\x3', '(', '\x3', '(', 
		'\x3', '(', '\x3', '(', '\x3', '(', '\x3', ')', '\x3', ')', '\x3', ')', 
		'\x3', ')', '\x3', ')', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', '\x3', '*', 
		'\x3', '*', '\x3', '*', '\x5', '*', '\x190', '\n', '*', '\x3', '+', '\x3', 
		'+', '\x3', '+', '\x3', ',', '\x3', ',', '\x3', ',', '\x3', '-', '\x3', 
		'-', '\x5', '-', '\x19A', '\n', '-', '\x3', '.', '\x3', '.', '\x3', '/', 
		'\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x3', '/', '\x5', '/', 
		'\x1A4', '\n', '/', '\x3', '/', '\x3', '/', '\a', '/', '\x1A8', '\n', 
		'/', '\f', '/', '\xE', '/', '\x1AB', '\v', '/', '\x3', '\x30', '\x3', 
		'\x30', '\x5', '\x30', '\x1AF', '\n', '\x30', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', '\x3', '\x31', 
		'\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', '\x3', '\x32', 
		'\x3', '\x32', '\x2', '\x3', '\\', '\x33', '\x2', '\x4', '\x6', '\b', 
		'\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', 
		'\x1E', ' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', 
		'\x36', '\x38', ':', '<', '>', '@', '\x42', '\x44', '\x46', 'H', 'J', 
		'L', 'N', 'P', 'R', 'T', 'V', 'X', 'Z', '\\', '^', '`', '\x62', '\x2', 
		'\x4', '\x4', '\x2', '\x5', '\b', '\x38', '=', '\x3', '\x2', '\x35', '\x36', 
		'\x2', '\x1BA', '\x2', '\x65', '\x3', '\x2', '\x2', '\x2', '\x4', 'q', 
		'\x3', '\x2', '\x2', '\x2', '\x6', 's', '\x3', '\x2', '\x2', '\x2', '\b', 
		'v', '\x3', '\x2', '\x2', '\x2', '\n', 'x', '\x3', '\x2', '\x2', '\x2', 
		'\f', '}', '\x3', '\x2', '\x2', '\x2', '\xE', '\x8C', '\x3', '\x2', '\x2', 
		'\x2', '\x10', '\x8E', '\x3', '\x2', '\x2', '\x2', '\x12', '\x95', '\x3', 
		'\x2', '\x2', '\x2', '\x14', '\x9C', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'\xA3', '\x3', '\x2', '\x2', '\x2', '\x18', '\xAA', '\x3', '\x2', '\x2', 
		'\x2', '\x1A', '\xB1', '\x3', '\x2', '\x2', '\x2', '\x1C', '\xB8', '\x3', 
		'\x2', '\x2', '\x2', '\x1E', '\xBF', '\x3', '\x2', '\x2', '\x2', ' ', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\"', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '$', '\xD4', '\x3', '\x2', '\x2', '\x2', '&', '\xDB', '\x3', '\x2', 
		'\x2', '\x2', '(', '\xE2', '\x3', '\x2', '\x2', '\x2', '*', '\xE9', '\x3', 
		'\x2', '\x2', '\x2', ',', '\xF9', '\x3', '\x2', '\x2', '\x2', '.', '\xFB', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x102', '\x3', '\x2', '\x2', '\x2', 
		'\x32', '\x109', '\x3', '\x2', '\x2', '\x2', '\x34', '\x111', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x119', '\x3', '\x2', '\x2', '\x2', '\x38', '\x121', 
		'\x3', '\x2', '\x2', '\x2', ':', '\x129', '\x3', '\x2', '\x2', '\x2', 
		'<', '\x131', '\x3', '\x2', '\x2', '\x2', '>', '\x139', '\x3', '\x2', 
		'\x2', '\x2', '@', '\x141', '\x3', '\x2', '\x2', '\x2', '\x42', '\x149', 
		'\x3', '\x2', '\x2', '\x2', '\x44', '\x14E', '\x3', '\x2', '\x2', '\x2', 
		'\x46', '\x155', '\x3', '\x2', '\x2', '\x2', 'H', '\x15C', '\x3', '\x2', 
		'\x2', '\x2', 'J', '\x163', '\x3', '\x2', '\x2', '\x2', 'L', '\x16A', 
		'\x3', '\x2', '\x2', '\x2', 'N', '\x171', '\x3', '\x2', '\x2', '\x2', 
		'P', '\x178', '\x3', '\x2', '\x2', '\x2', 'R', '\x18F', '\x3', '\x2', 
		'\x2', '\x2', 'T', '\x191', '\x3', '\x2', '\x2', '\x2', 'V', '\x194', 
		'\x3', '\x2', '\x2', '\x2', 'X', '\x199', '\x3', '\x2', '\x2', '\x2', 
		'Z', '\x19B', '\x3', '\x2', '\x2', '\x2', '\\', '\x1A3', '\x3', '\x2', 
		'\x2', '\x2', '^', '\x1AE', '\x3', '\x2', '\x2', '\x2', '`', '\x1B0', 
		'\x3', '\x2', '\x2', '\x2', '\x62', '\x1B7', '\x3', '\x2', '\x2', '\x2', 
		'\x64', '\x66', '\x5', '\xE', '\b', '\x2', '\x65', '\x64', '\x3', '\x2', 
		'\x2', '\x2', '\x66', 'g', '\x3', '\x2', '\x2', '\x2', 'g', '\x65', '\x3', 
		'\x2', '\x2', '\x2', 'g', 'h', '\x3', '\x2', '\x2', '\x2', 'h', '\x3', 
		'\x3', '\x2', '\x2', '\x2', 'i', 'r', '\a', '\x37', '\x2', '\x2', 'j', 
		'r', '\a', '\x35', '\x2', '\x2', 'k', 'l', '\a', '\x37', '\x2', '\x2', 
		'l', 'r', '\x5', '\x4', '\x3', '\x2', 'm', 'n', '\a', '\x35', '\x2', '\x2', 
		'n', 'r', '\x5', '\x4', '\x3', '\x2', 'o', 'p', '\a', '\x3', '\x2', '\x2', 
		'p', 'r', '\x5', '\x4', '\x3', '\x2', 'q', 'i', '\x3', '\x2', '\x2', '\x2', 
		'q', 'j', '\x3', '\x2', '\x2', '\x2', 'q', 'k', '\x3', '\x2', '\x2', '\x2', 
		'q', 'm', '\x3', '\x2', '\x2', '\x2', 'q', 'o', '\x3', '\x2', '\x2', '\x2', 
		'r', '\x5', '\x3', '\x2', '\x2', '\x2', 's', 't', '\x5', '\x4', '\x3', 
		'\x2', 't', 'u', '\a', '\x4', '\x2', '\x2', 'u', '\a', '\x3', '\x2', '\x2', 
		'\x2', 'v', 'w', '\t', '\x2', '\x2', '\x2', 'w', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'x', 'y', '\t', '\x3', '\x2', '\x2', 'y', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'z', '{', '\a', '\t', '\x2', '\x2', '{', '~', '\x5', '\n', '\x6', 
		'\x2', '|', '~', '\x5', '\n', '\x6', '\x2', '}', 'z', '\x3', '\x2', '\x2', 
		'\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '~', '\r', '\x3', '\x2', 
		'\x2', '\x2', '\x7F', '\x80', '\x5', '\\', '/', '\x2', '\x80', '\x81', 
		'\a', '\x33', '\x2', '\x2', '\x81', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x82', '\x8D', '\x5', '\\', '/', '\x2', '\x83', '\x84', '\x5', '\x6', 
		'\x4', '\x2', '\x84', '\x85', '\x5', '\\', '/', '\x2', '\x85', '\x86', 
		'\a', '\x33', '\x2', '\x2', '\x86', '\x8D', '\x3', '\x2', '\x2', '\x2', 
		'\x87', '\x88', '\x5', '\x6', '\x4', '\x2', '\x88', '\x89', '\x5', '\\', 
		'/', '\x2', '\x89', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8A', '\x8D', 
		'\a', '\x33', '\x2', '\x2', '\x8B', '\x8D', '\a', '\x34', '\x2', '\x2', 
		'\x8C', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x82', '\x3', '\x2', 
		'\x2', '\x2', '\x8C', '\x83', '\x3', '\x2', '\x2', '\x2', '\x8C', '\x87', 
		'\x3', '\x2', '\x2', '\x2', '\x8C', '\x8A', '\x3', '\x2', '\x2', '\x2', 
		'\x8C', '\x8B', '\x3', '\x2', '\x2', '\x2', '\x8D', '\xF', '\x3', '\x2', 
		'\x2', '\x2', '\x8E', '\x8F', '\a', '\n', '\x2', '\x2', '\x8F', '\x90', 
		'\x5', '\b', '\x5', '\x2', '\x90', '\x91', '\a', '\v', '\x2', '\x2', '\x91', 
		'\x92', '\x5', '\b', '\x5', '\x2', '\x92', '\x93', '\a', '\v', '\x2', 
		'\x2', '\x93', '\x94', '\x5', '\b', '\x5', '\x2', '\x94', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x96', '\a', '\f', '\x2', '\x2', '\x96', 
		'\x97', '\x5', '\b', '\x5', '\x2', '\x97', '\x98', '\a', '\v', '\x2', 
		'\x2', '\x98', '\x99', '\x5', '\b', '\x5', '\x2', '\x99', '\x9A', '\a', 
		'\v', '\x2', '\x2', '\x9A', '\x9B', '\x5', '\b', '\x5', '\x2', '\x9B', 
		'\x13', '\x3', '\x2', '\x2', '\x2', '\x9C', '\x9D', '\a', '\r', '\x2', 
		'\x2', '\x9D', '\x9E', '\x5', '\b', '\x5', '\x2', '\x9E', '\x9F', '\a', 
		'\v', '\x2', '\x2', '\x9F', '\xA0', '\x5', '\b', '\x5', '\x2', '\xA0', 
		'\xA1', '\a', '\v', '\x2', '\x2', '\xA1', '\xA2', '\x5', '\b', '\x5', 
		'\x2', '\xA2', '\x15', '\x3', '\x2', '\x2', '\x2', '\xA3', '\xA4', '\a', 
		'\xE', '\x2', '\x2', '\xA4', '\xA5', '\x5', '\b', '\x5', '\x2', '\xA5', 
		'\xA6', '\a', '\v', '\x2', '\x2', '\xA6', '\xA7', '\x5', '\b', '\x5', 
		'\x2', '\xA7', '\xA8', '\a', '\v', '\x2', '\x2', '\xA8', '\xA9', '\x5', 
		'\b', '\x5', '\x2', '\xA9', '\x17', '\x3', '\x2', '\x2', '\x2', '\xAA', 
		'\xAB', '\a', '\xF', '\x2', '\x2', '\xAB', '\xAC', '\x5', '\b', '\x5', 
		'\x2', '\xAC', '\xAD', '\a', '\v', '\x2', '\x2', '\xAD', '\xAE', '\x5', 
		'\b', '\x5', '\x2', '\xAE', '\xAF', '\a', '\v', '\x2', '\x2', '\xAF', 
		'\xB0', '\x5', '\b', '\x5', '\x2', '\xB0', '\x19', '\x3', '\x2', '\x2', 
		'\x2', '\xB1', '\xB2', '\a', '\x10', '\x2', '\x2', '\xB2', '\xB3', '\x5', 
		'\b', '\x5', '\x2', '\xB3', '\xB4', '\a', '\v', '\x2', '\x2', '\xB4', 
		'\xB5', '\x5', '\b', '\x5', '\x2', '\xB5', '\xB6', '\a', '\v', '\x2', 
		'\x2', '\xB6', '\xB7', '\x5', '\b', '\x5', '\x2', '\xB7', '\x1B', '\x3', 
		'\x2', '\x2', '\x2', '\xB8', '\xB9', '\a', '\x11', '\x2', '\x2', '\xB9', 
		'\xBA', '\x5', '\b', '\x5', '\x2', '\xBA', '\xBB', '\a', '\v', '\x2', 
		'\x2', '\xBB', '\xBC', '\x5', '\b', '\x5', '\x2', '\xBC', '\xBD', '\a', 
		'\v', '\x2', '\x2', '\xBD', '\xBE', '\x5', '\b', '\x5', '\x2', '\xBE', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC0', '\a', '\x12', '\x2', 
		'\x2', '\xC0', '\xC1', '\x5', '\b', '\x5', '\x2', '\xC1', '\xC2', '\a', 
		'\v', '\x2', '\x2', '\xC2', '\xC3', '\x5', '\b', '\x5', '\x2', '\xC3', 
		'\xC4', '\a', '\v', '\x2', '\x2', '\xC4', '\xC5', '\x5', '\b', '\x5', 
		'\x2', '\xC5', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xC6', '\xC7', '\a', 
		'\x13', '\x2', '\x2', '\xC7', '\xC8', '\x5', '\b', '\x5', '\x2', '\xC8', 
		'\xC9', '\a', '\v', '\x2', '\x2', '\xC9', '\xCA', '\x5', '\b', '\x5', 
		'\x2', '\xCA', '\xCB', '\a', '\v', '\x2', '\x2', '\xCB', '\xCC', '\x5', 
		'\b', '\x5', '\x2', '\xCC', '!', '\x3', '\x2', '\x2', '\x2', '\xCD', '\xCE', 
		'\a', '\x14', '\x2', '\x2', '\xCE', '\xCF', '\x5', '\b', '\x5', '\x2', 
		'\xCF', '\xD0', '\a', '\v', '\x2', '\x2', '\xD0', '\xD1', '\x5', '\b', 
		'\x5', '\x2', '\xD1', '\xD2', '\a', '\v', '\x2', '\x2', '\xD2', '\xD3', 
		'\x5', '\b', '\x5', '\x2', '\xD3', '#', '\x3', '\x2', '\x2', '\x2', '\xD4', 
		'\xD5', '\a', '\x15', '\x2', '\x2', '\xD5', '\xD6', '\x5', '\b', '\x5', 
		'\x2', '\xD6', '\xD7', '\a', '\v', '\x2', '\x2', '\xD7', '\xD8', '\x5', 
		'\b', '\x5', '\x2', '\xD8', '\xD9', '\a', '\v', '\x2', '\x2', '\xD9', 
		'\xDA', '\x5', '\n', '\x6', '\x2', '\xDA', '%', '\x3', '\x2', '\x2', '\x2', 
		'\xDB', '\xDC', '\a', '\x16', '\x2', '\x2', '\xDC', '\xDD', '\x5', '\b', 
		'\x5', '\x2', '\xDD', '\xDE', '\a', '\v', '\x2', '\x2', '\xDE', '\xDF', 
		'\x5', '\b', '\x5', '\x2', '\xDF', '\xE0', '\a', '\v', '\x2', '\x2', '\xE0', 
		'\xE1', '\x5', '\n', '\x6', '\x2', '\xE1', '\'', '\x3', '\x2', '\x2', 
		'\x2', '\xE2', '\xE3', '\a', '\x17', '\x2', '\x2', '\xE3', '\xE4', '\x5', 
		'\b', '\x5', '\x2', '\xE4', '\xE5', '\a', '\v', '\x2', '\x2', '\xE5', 
		'\xE6', '\x5', '\b', '\x5', '\x2', '\xE6', '\xE7', '\a', '\v', '\x2', 
		'\x2', '\xE7', '\xE8', '\x5', '\n', '\x6', '\x2', '\xE8', ')', '\x3', 
		'\x2', '\x2', '\x2', '\xE9', '\xEA', '\a', '\x18', '\x2', '\x2', '\xEA', 
		'\xEB', '\x5', '\b', '\x5', '\x2', '\xEB', '+', '\x3', '\x2', '\x2', '\x2', 
		'\xEC', '\xFA', '\x5', '\x10', '\t', '\x2', '\xED', '\xFA', '\x5', '\x12', 
		'\n', '\x2', '\xEE', '\xFA', '\x5', '\x14', '\v', '\x2', '\xEF', '\xFA', 
		'\x5', '\x16', '\f', '\x2', '\xF0', '\xFA', '\x5', '\x18', '\r', '\x2', 
		'\xF1', '\xFA', '\x5', '\x1A', '\xE', '\x2', '\xF2', '\xFA', '\x5', '\x1C', 
		'\xF', '\x2', '\xF3', '\xFA', '\x5', '\x1E', '\x10', '\x2', '\xF4', '\xFA', 
		'\x5', ' ', '\x11', '\x2', '\xF5', '\xFA', '\x5', '$', '\x13', '\x2', 
		'\xF6', '\xFA', '\x5', '&', '\x14', '\x2', '\xF7', '\xFA', '\x5', '(', 
		'\x15', '\x2', '\xF8', '\xFA', '\x5', '*', '\x16', '\x2', '\xF9', '\xEC', 
		'\x3', '\x2', '\x2', '\x2', '\xF9', '\xED', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xEE', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xEF', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xF0', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF1', 
		'\x3', '\x2', '\x2', '\x2', '\xF9', '\xF2', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xF3', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF4', '\x3', '\x2', 
		'\x2', '\x2', '\xF9', '\xF5', '\x3', '\x2', '\x2', '\x2', '\xF9', '\xF6', 
		'\x3', '\x2', '\x2', '\x2', '\xF9', '\xF7', '\x3', '\x2', '\x2', '\x2', 
		'\xF9', '\xF8', '\x3', '\x2', '\x2', '\x2', '\xFA', '-', '\x3', '\x2', 
		'\x2', '\x2', '\xFB', '\xFC', '\a', '\x19', '\x2', '\x2', '\xFC', '\xFD', 
		'\x5', '\b', '\x5', '\x2', '\xFD', '\xFE', '\a', '\v', '\x2', '\x2', '\xFE', 
		'\xFF', '\x5', '\b', '\x5', '\x2', '\xFF', '\x100', '\a', '\v', '\x2', 
		'\x2', '\x100', '\x101', '\x5', '\f', '\a', '\x2', '\x101', '/', '\x3', 
		'\x2', '\x2', '\x2', '\x102', '\x103', '\a', '\x1A', '\x2', '\x2', '\x103', 
		'\x104', '\x5', '\b', '\x5', '\x2', '\x104', '\x105', '\a', '\v', '\x2', 
		'\x2', '\x105', '\x106', '\x5', '\b', '\x5', '\x2', '\x106', '\x107', 
		'\a', '\v', '\x2', '\x2', '\x107', '\x108', '\x5', '\n', '\x6', '\x2', 
		'\x108', '\x31', '\x3', '\x2', '\x2', '\x2', '\x109', '\x10A', '\a', '\x1B', 
		'\x2', '\x2', '\x10A', '\x10B', '\x5', '\b', '\x5', '\x2', '\x10B', '\x10C', 
		'\a', '\v', '\x2', '\x2', '\x10C', '\x10D', '\x5', '\f', '\a', '\x2', 
		'\x10D', '\x10E', '\a', '\x1C', '\x2', '\x2', '\x10E', '\x10F', '\x5', 
		'\b', '\x5', '\x2', '\x10F', '\x110', '\a', '\x1D', '\x2', '\x2', '\x110', 
		'\x33', '\x3', '\x2', '\x2', '\x2', '\x111', '\x112', '\a', '\x1E', '\x2', 
		'\x2', '\x112', '\x113', '\x5', '\b', '\x5', '\x2', '\x113', '\x114', 
		'\a', '\v', '\x2', '\x2', '\x114', '\x115', '\x5', '\f', '\a', '\x2', 
		'\x115', '\x116', '\a', '\x1C', '\x2', '\x2', '\x116', '\x117', '\x5', 
		'\b', '\x5', '\x2', '\x117', '\x118', '\a', '\x1D', '\x2', '\x2', '\x118', 
		'\x35', '\x3', '\x2', '\x2', '\x2', '\x119', '\x11A', '\a', '\x1F', '\x2', 
		'\x2', '\x11A', '\x11B', '\x5', '\b', '\x5', '\x2', '\x11B', '\x11C', 
		'\a', '\v', '\x2', '\x2', '\x11C', '\x11D', '\x5', '\f', '\a', '\x2', 
		'\x11D', '\x11E', '\a', '\x1C', '\x2', '\x2', '\x11E', '\x11F', '\x5', 
		'\b', '\x5', '\x2', '\x11F', '\x120', '\a', '\x1D', '\x2', '\x2', '\x120', 
		'\x37', '\x3', '\x2', '\x2', '\x2', '\x121', '\x122', '\a', ' ', '\x2', 
		'\x2', '\x122', '\x123', '\x5', '\b', '\x5', '\x2', '\x123', '\x124', 
		'\a', '\v', '\x2', '\x2', '\x124', '\x125', '\x5', '\f', '\a', '\x2', 
		'\x125', '\x126', '\a', '\x1C', '\x2', '\x2', '\x126', '\x127', '\x5', 
		'\b', '\x5', '\x2', '\x127', '\x128', '\a', '\x1D', '\x2', '\x2', '\x128', 
		'\x39', '\x3', '\x2', '\x2', '\x2', '\x129', '\x12A', '\a', '!', '\x2', 
		'\x2', '\x12A', '\x12B', '\x5', '\b', '\x5', '\x2', '\x12B', '\x12C', 
		'\a', '\v', '\x2', '\x2', '\x12C', '\x12D', '\x5', '\f', '\a', '\x2', 
		'\x12D', '\x12E', '\a', '\x1C', '\x2', '\x2', '\x12E', '\x12F', '\x5', 
		'\b', '\x5', '\x2', '\x12F', '\x130', '\a', '\x1D', '\x2', '\x2', '\x130', 
		';', '\x3', '\x2', '\x2', '\x2', '\x131', '\x132', '\a', '\"', '\x2', 
		'\x2', '\x132', '\x133', '\x5', '\b', '\x5', '\x2', '\x133', '\x134', 
		'\a', '\v', '\x2', '\x2', '\x134', '\x135', '\x5', '\f', '\a', '\x2', 
		'\x135', '\x136', '\a', '\x1C', '\x2', '\x2', '\x136', '\x137', '\x5', 
		'\b', '\x5', '\x2', '\x137', '\x138', '\a', '\x1D', '\x2', '\x2', '\x138', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x139', '\x13A', '\a', '#', '\x2', '\x2', 
		'\x13A', '\x13B', '\x5', '\b', '\x5', '\x2', '\x13B', '\x13C', '\a', '\v', 
		'\x2', '\x2', '\x13C', '\x13D', '\x5', '\f', '\a', '\x2', '\x13D', '\x13E', 
		'\a', '\x1C', '\x2', '\x2', '\x13E', '\x13F', '\x5', '\b', '\x5', '\x2', 
		'\x13F', '\x140', '\a', '\x1D', '\x2', '\x2', '\x140', '?', '\x3', '\x2', 
		'\x2', '\x2', '\x141', '\x142', '\a', '$', '\x2', '\x2', '\x142', '\x143', 
		'\x5', '\b', '\x5', '\x2', '\x143', '\x144', '\a', '\v', '\x2', '\x2', 
		'\x144', '\x145', '\x5', '\f', '\a', '\x2', '\x145', '\x146', '\a', '\x1C', 
		'\x2', '\x2', '\x146', '\x147', '\x5', '\b', '\x5', '\x2', '\x147', '\x148', 
		'\a', '\x1D', '\x2', '\x2', '\x148', '\x41', '\x3', '\x2', '\x2', '\x2', 
		'\x149', '\x14A', '\a', '%', '\x2', '\x2', '\x14A', '\x14B', '\x5', '\b', 
		'\x5', '\x2', '\x14B', '\x14C', '\a', '\v', '\x2', '\x2', '\x14C', '\x14D', 
		'\x5', '\n', '\x6', '\x2', '\x14D', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x14E', '\x14F', '\a', '&', '\x2', '\x2', '\x14F', '\x150', '\x5', '\b', 
		'\x5', '\x2', '\x150', '\x151', '\a', '\v', '\x2', '\x2', '\x151', '\x152', 
		'\x5', '\b', '\x5', '\x2', '\x152', '\x153', '\a', '\v', '\x2', '\x2', 
		'\x153', '\x154', '\x5', '\n', '\x6', '\x2', '\x154', '\x45', '\x3', '\x2', 
		'\x2', '\x2', '\x155', '\x156', '\a', '\'', '\x2', '\x2', '\x156', '\x157', 
		'\x5', '\b', '\x5', '\x2', '\x157', '\x158', '\a', '\v', '\x2', '\x2', 
		'\x158', '\x159', '\x5', '\b', '\x5', '\x2', '\x159', '\x15A', '\a', '\v', 
		'\x2', '\x2', '\x15A', '\x15B', '\x5', '\n', '\x6', '\x2', '\x15B', 'G', 
		'\x3', '\x2', '\x2', '\x2', '\x15C', '\x15D', '\a', '(', '\x2', '\x2', 
		'\x15D', '\x15E', '\x5', '\b', '\x5', '\x2', '\x15E', '\x15F', '\a', '\v', 
		'\x2', '\x2', '\x15F', '\x160', '\x5', '\b', '\x5', '\x2', '\x160', '\x161', 
		'\a', '\v', '\x2', '\x2', '\x161', '\x162', '\x5', '\n', '\x6', '\x2', 
		'\x162', 'I', '\x3', '\x2', '\x2', '\x2', '\x163', '\x164', '\a', ')', 
		'\x2', '\x2', '\x164', '\x165', '\x5', '\b', '\x5', '\x2', '\x165', '\x166', 
		'\a', '\v', '\x2', '\x2', '\x166', '\x167', '\x5', '\b', '\x5', '\x2', 
		'\x167', '\x168', '\a', '\v', '\x2', '\x2', '\x168', '\x169', '\x5', '\f', 
		'\a', '\x2', '\x169', 'K', '\x3', '\x2', '\x2', '\x2', '\x16A', '\x16B', 
		'\a', '*', '\x2', '\x2', '\x16B', '\x16C', '\x5', '\b', '\x5', '\x2', 
		'\x16C', '\x16D', '\a', '\v', '\x2', '\x2', '\x16D', '\x16E', '\x5', '\b', 
		'\x5', '\x2', '\x16E', '\x16F', '\a', '\v', '\x2', '\x2', '\x16F', '\x170', 
		'\x5', '\x4', '\x3', '\x2', '\x170', 'M', '\x3', '\x2', '\x2', '\x2', 
		'\x171', '\x172', '\a', '+', '\x2', '\x2', '\x172', '\x173', '\x5', '\b', 
		'\x5', '\x2', '\x173', '\x174', '\a', '\v', '\x2', '\x2', '\x174', '\x175', 
		'\x5', '\b', '\x5', '\x2', '\x175', '\x176', '\a', '\v', '\x2', '\x2', 
		'\x176', '\x177', '\x5', '\x4', '\x3', '\x2', '\x177', 'O', '\x3', '\x2', 
		'\x2', '\x2', '\x178', '\x179', '\a', ',', '\x2', '\x2', '\x179', '\x17A', 
		'\x5', '\b', '\x5', '\x2', '\x17A', '\x17B', '\a', '\v', '\x2', '\x2', 
		'\x17B', '\x17C', '\x5', '\x4', '\x3', '\x2', '\x17C', 'Q', '\x3', '\x2', 
		'\x2', '\x2', '\x17D', '\x190', '\x5', '.', '\x18', '\x2', '\x17E', '\x190', 
		'\x5', '\x30', '\x19', '\x2', '\x17F', '\x190', '\x5', '\x32', '\x1A', 
		'\x2', '\x180', '\x190', '\x5', '\x34', '\x1B', '\x2', '\x181', '\x190', 
		'\x5', '\x36', '\x1C', '\x2', '\x182', '\x190', '\x5', '\x38', '\x1D', 
		'\x2', '\x183', '\x190', '\x5', ':', '\x1E', '\x2', '\x184', '\x190', 
		'\x5', '<', '\x1F', '\x2', '\x185', '\x190', '\x5', '>', ' ', '\x2', '\x186', 
		'\x190', '\x5', '@', '!', '\x2', '\x187', '\x190', '\x5', '\x42', '\"', 
		'\x2', '\x188', '\x190', '\x5', '\x44', '#', '\x2', '\x189', '\x190', 
		'\x5', '\x46', '$', '\x2', '\x18A', '\x190', '\x5', 'H', '%', '\x2', '\x18B', 
		'\x190', '\x5', 'J', '&', '\x2', '\x18C', '\x190', '\x5', 'L', '\'', '\x2', 
		'\x18D', '\x190', '\x5', 'N', '(', '\x2', '\x18E', '\x190', '\x5', 'P', 
		')', '\x2', '\x18F', '\x17D', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x17E', 
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x17F', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x180', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x181', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x182', '\x3', '\x2', '\x2', '\x2', '\x18F', 
		'\x183', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x184', '\x3', '\x2', '\x2', 
		'\x2', '\x18F', '\x185', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x186', 
		'\x3', '\x2', '\x2', '\x2', '\x18F', '\x187', '\x3', '\x2', '\x2', '\x2', 
		'\x18F', '\x188', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x189', '\x3', 
		'\x2', '\x2', '\x2', '\x18F', '\x18A', '\x3', '\x2', '\x2', '\x2', '\x18F', 
		'\x18B', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x18C', '\x3', '\x2', '\x2', 
		'\x2', '\x18F', '\x18D', '\x3', '\x2', '\x2', '\x2', '\x18F', '\x18E', 
		'\x3', '\x2', '\x2', '\x2', '\x190', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\x191', '\x192', '\a', '-', '\x2', '\x2', '\x192', '\x193', '\x5', '\x4', 
		'\x3', '\x2', '\x193', 'U', '\x3', '\x2', '\x2', '\x2', '\x194', '\x195', 
		'\a', '.', '\x2', '\x2', '\x195', '\x196', '\x5', '\x4', '\x3', '\x2', 
		'\x196', 'W', '\x3', '\x2', '\x2', '\x2', '\x197', '\x19A', '\x5', 'T', 
		'+', '\x2', '\x198', '\x19A', '\x5', 'V', ',', '\x2', '\x199', '\x197', 
		'\x3', '\x2', '\x2', '\x2', '\x199', '\x198', '\x3', '\x2', '\x2', '\x2', 
		'\x19A', 'Y', '\x3', '\x2', '\x2', '\x2', '\x19B', '\x19C', '\a', '/', 
		'\x2', '\x2', '\x19C', '[', '\x3', '\x2', '\x2', '\x2', '\x19D', '\x19E', 
		'\b', '/', '\x1', '\x2', '\x19E', '\x1A4', '\x5', ',', '\x17', '\x2', 
		'\x19F', '\x1A4', '\x5', 'R', '*', '\x2', '\x1A0', '\x1A4', '\x5', 'X', 
		'-', '\x2', '\x1A1', '\x1A4', '\x5', '^', '\x30', '\x2', '\x1A2', '\x1A4', 
		'\x5', 'Z', '.', '\x2', '\x1A3', '\x19D', '\x3', '\x2', '\x2', '\x2', 
		'\x1A3', '\x19F', '\x3', '\x2', '\x2', '\x2', '\x1A3', '\x1A0', '\x3', 
		'\x2', '\x2', '\x2', '\x1A3', '\x1A1', '\x3', '\x2', '\x2', '\x2', '\x1A3', 
		'\x1A2', '\x3', '\x2', '\x2', '\x2', '\x1A4', '\x1A9', '\x3', '\x2', '\x2', 
		'\x2', '\x1A5', '\x1A6', '\f', '\x3', '\x2', '\x2', '\x1A6', '\x1A8', 
		'\a', '\x34', '\x2', '\x2', '\x1A7', '\x1A5', '\x3', '\x2', '\x2', '\x2', 
		'\x1A8', '\x1AB', '\x3', '\x2', '\x2', '\x2', '\x1A9', '\x1A7', '\x3', 
		'\x2', '\x2', '\x2', '\x1A9', '\x1AA', '\x3', '\x2', '\x2', '\x2', '\x1AA', 
		']', '\x3', '\x2', '\x2', '\x2', '\x1AB', '\x1A9', '\x3', '\x2', '\x2', 
		'\x2', '\x1AC', '\x1AF', '\x5', '`', '\x31', '\x2', '\x1AD', '\x1AF', 
		'\x5', '\x62', '\x32', '\x2', '\x1AE', '\x1AC', '\x3', '\x2', '\x2', '\x2', 
		'\x1AE', '\x1AD', '\x3', '\x2', '\x2', '\x2', '\x1AF', '_', '\x3', '\x2', 
		'\x2', '\x2', '\x1B0', '\x1B1', '\a', '\x30', '\x2', '\x2', '\x1B1', '\x1B2', 
		'\x5', '\b', '\x5', '\x2', '\x1B2', '\x1B3', '\a', '\v', '\x2', '\x2', 
		'\x1B3', '\x1B4', '\x5', '\b', '\x5', '\x2', '\x1B4', '\x1B5', '\a', '\v', 
		'\x2', '\x2', '\x1B5', '\x1B6', '\x5', '\x4', '\x3', '\x2', '\x1B6', '\x61', 
		'\x3', '\x2', '\x2', '\x2', '\x1B7', '\x1B8', '\a', '\x31', '\x2', '\x2', 
		'\x1B8', '\x1B9', '\x5', '\b', '\x5', '\x2', '\x1B9', '\x1BA', '\a', '\v', 
		'\x2', '\x2', '\x1BA', '\x1BB', '\x5', '\b', '\x5', '\x2', '\x1BB', '\x63', 
		'\x3', '\x2', '\x2', '\x2', '\f', 'g', 'q', '}', '\x8C', '\xF9', '\x18F', 
		'\x199', '\x1A3', '\x1A9', '\x1AE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
